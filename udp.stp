#!/usr/bin/stap

function print_process_info() {
    printf("pid:%d, tid:%d, pid name:%s, ppid:%d, ppid name:%s, func:%s, cmd:%s\n",
            pid(), tid(), pid2execname(pid()), ppid(), pid2execname(ppid()), ppfunc(), cmdline_str())
}

function print_kstack() {
    print_syms(backtrace())
    printf("------------------\n\n")
}

/* probe udp.recvmsg.return */
/* { */
    /* if(tid()==target()){ */
        /* print_process_info() */
        /* printf("from %s:%d, to %s:%d\n", format_ipaddr(@cast($msg->msg_name, "sockaddr_in")->sin_addr->s_addr, @cast($msg->msg_name, "sockaddr_in")->sin_family), */
                                         /* ntohs(@cast($msg->msg_name, "sockaddr_in")->sin_port), */
                                         /* saddr, */
                                         /* sport) */
    /* } */
/* } */

probe kernel.statement("udp_recvmsg@net/ipv4/udp.c:1802")
{
    printf("\n")
    printf("%s probe:udp.recvmsg.return\n", ctime())
    print_process_info()
    if($msg != 0 && $msg->msg_name != 0)
    {
        printf("from %s:%d\n",
                format_ipaddr(@cast($msg->msg_name, "sockaddr_in")->sin_addr->s_addr, @cast($msg->msg_name, "sockaddr_in")->sin_family),
                ntohs(@cast($msg->msg_name, "sockaddr_in")->sin_port))
    }
    printf("to %s:%d, socket inode no:%s\n", saddr, sport, $sk->sk_socket->file->f_inode->i_ino$$)
    print_kstack()
}

